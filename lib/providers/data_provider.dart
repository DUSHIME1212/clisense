import 'package:flutter/foundation.dart';
import '../models/forecast_model.dart';
import '../models/alert_model.dart';
import '../models/crop_advice_model.dart';
import '../services/database_service.dart';

class DataProvider with ChangeNotifier {
  final DatabaseService _databaseService = DatabaseService();
  
  List<ForecastModel> _forecasts = [];
  List<AlertModel> _alerts = [];
  List<CropAdviceModel> _cropAdvice = [];
  String? _currentLocation;
  String? _selectedCrop;
  bool _isLoading = false;
  String? _error;

  // Getters
  List<ForecastModel> get forecasts => _forecasts;
  List<AlertModel> get alerts => _alerts;
  List<CropAdviceModel> get cropAdvice => _cropAdvice;
  String? get currentLocation => _currentLocation;
  String? get selectedCrop => _selectedCrop;
  bool get isLoading => _isLoading;
  String? get error => _error;

  // Set current location and load relevant data
  void setLocation(String locationId) {
    _currentLocation = locationId;
    loadForecasts();
    loadAlerts();
  }

  // Set selected crop and load relevant advice
  void setSelectedCrop(String crop) {
    _selectedCrop = crop;
    loadCropAdvice();
  }

  // Load forecasts for current location
  Future<void> loadForecasts() async {
    if (_currentLocation == null) return;
    
    _isLoading = true;
    _error = null;
    notifyListeners();

    try {
      _databaseService.getForecastsByLocation(_currentLocation!).listen((forecasts) {
        _forecasts = forecasts;
        _isLoading = false;
        notifyListeners();
      });
    } catch (e) {
      _error = 'Failed to load forecasts: ${e.toString()}';
      _isLoading = false;
      notifyListeners();
    }
  }

  // Load alerts for current location
  Future<void> loadAlerts() async {
    if (_currentLocation == null) return;
    
    _isLoading = true;
    _error = null;
    notifyListeners();

    try {
      _databaseService.getAlertsByRegion(_currentLocation!).listen((alerts) {
        _alerts = alerts;
        _isLoading = false;
        notifyListeners();
      });
    } catch (e) {
      _error = 'Failed to load alerts: ${e.toString()}';
      _isLoading = false;
      notifyListeners();
    }
  }

  // Load crop advice for selected crop and location
  Future<void> loadCropAdvice() async {
    if (_selectedCrop == null || _currentLocation == null) return;
    
    _isLoading = true;
    _error = null;
    notifyListeners();

    try {
      _databaseService.getCropAdvice(_selectedCrop!, _currentLocation!).listen((advice) {
        _cropAdvice = advice;
        _isLoading = false;
        notifyListeners();
      });
    } catch (e) {
      _error = 'Failed to load crop advice: ${e.toString()}';
      _isLoading = false;
      notifyListeners();
    }
  }

  // Submit feedback
  Future<bool> submitFeedback({
    required String userId,
    required String feedbackType,
    required String message,
    required int rating,
  }) async {
    _isLoading = true;
    _error = null;
    notifyListeners();

    try {
      await _databaseService.submitFeedback(
        FeedbackModel(
          id: '', // Will be auto-generated by Firestore
          userId: userId,
          feedbackType: feedbackType,
          message: message,
          rating: rating,
        ),
      );
      _isLoading = false;
      notifyListeners();
      return true;
    } catch (e) {
      _error = 'Failed to submit feedback: ${e.toString()}';
      _isLoading = false;
      notifyListeners();
      return false;
    }
  }

  // Log extension visit
  Future<bool> logExtensionVisit({
    required String officerName,
    required String userId,
    required String region,
    required String notes,
    required DateTime visitDate,
  }) async {
    _isLoading = true;
    _error = null;
    notifyListeners();

    try {
      await _databaseService.logExtensionVisit(
        ExtensionVisitModel(
          id: '', // Will be auto-generated by Firestore
          officerName: officerName,
          userId: userId,
          region: region,
          notes: notes,
          visitDate: visitDate,
        ),
      );
      _isLoading = false;
      notifyListeners();
      return true;
    } catch (e) {
      _error = 'Failed to log extension visit: ${e.toString()}';
      _isLoading = false;
      notifyListeners();
      return false;
    }
  }
}
